class VFSNode:
    """
    –û–¥–∏–Ω —É–∑–µ–ª –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ (—Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫–∞)
    """
    def __init__(self, node_type, path, name, content, encoding, permissions):
        self.type = node_type      # 'file' –∏–ª–∏ 'directory'
        self.path = path          # –ø–æ–ª–Ω—ã–π –ø—É—Ç—å: '/home/user'
        self.name = name          # –∏–º—è: 'user'
        self.content = content    # —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ (—É–∂–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ)
        self.encoding = encoding  # 'text' –∏–ª–∏ 'base64' (–ù–û–í–û–ï!)
        self.permissions = permissions  # 'rwxr-xr-x'
        self.children = []        # —Å–ø–∏—Å–æ–∫ –¥–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–æ–≤ (–¥–ª—è –ø–∞–ø–æ–∫)
        self.parent = None        # —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —É–∑–µ–ª
    
    def __str__(self):
        """
        –ö—Ä–∞—Å–∏–≤–æ–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —É–∑–ª–∞
        """
        if self.type == 'directory':
            return f"üìÅ {self.name}/"
        else:
            encoding_info = f" [{self.encoding}]" if self.encoding != 'text' else ""
            return f"üìÑ {self.name}{encoding_info}"

class VirtualFileSystem:
    def __init__(self):
        self.root = None          # –∫–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞
        self.current_path = "/"   # —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å
        self.nodes = {}           # —Å–ª–æ–≤–∞—Ä—å {–ø—É—Ç—å: —É–∑–µ–ª}
    
    def load_from_csv(self, csv_path):
        try:
            import csv
            import base64  
            
            print(f"Loading VFS from: {csv_path}")
            self.nodes = {}
            
            with open(csv_path, 'r', encoding='utf-8') as file:
                reader = csv.DictReader(file)
                
                # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –≤—Å–µ —É–∑–ª—ã
                for row in reader:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
                    content = row['content']
                    encoding = row.get('encoding', 'text')  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'text'
                    
                    if encoding == 'base64' and content:
                        try:
                            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–∑ Base64 –≤ –±–∞–π—Ç—ã, –∑–∞—Ç–µ–º –≤ —Å—Ç—Ä–æ–∫—É
                            decoded_bytes = base64.b64decode(content)
                            content = decoded_bytes.decode('utf-8')
                        except Exception as e:
                            print(f"Warning: Failed to decode Base64 for {row['path']}: {e}")
                            content = "[Base64 decoding error]"
                    
                    node = VFSNode(
                        node_type=row['type'],
                        path=row['path'],
                        name=row['name'],
                        content=content,
                        encoding=encoding,
                        permissions=row['permissions']
                    )
                    self.nodes[node.path] = node
                
                self._build_tree()
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä–µ–Ω—å –∏ —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                self.root = self.nodes.get('/')
                if self.root:
                    self.current_directory = self.root
                    print("VFS loaded successfully!")
                else:
                    print("Error: Root directory not found in CSV")
                    
        except FileNotFoundError:
            print(f"Error: VFS file '{csv_path}' not found")
        except Exception as e:
            print(f"Error loading VFS: {e}")
    
    def _build_tree(self):
        """
        –°—Ç—Ä–æ–∏—Ç –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ —É–∑–ª–æ–≤
        """
        for path, node in self.nodes.items():
            if path == '/':  # –∫–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª –Ω–µ –∏–º–µ–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è
                continue
            
            # –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            parent_path = '/'.join(path.split('/')[:-1]) or '/'
            parent_node = self.nodes.get(parent_path)
            
            if parent_node and parent_node.type == 'directory':
                parent_node.children.append(node)
                node.parent = parent_node
    
    def get_node(self, path):
        # –ï—Å–ª–∏ –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π - –¥–µ–ª–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–º
        if not path.startswith('/'):
            path = self.current_path + '/' + path if self.current_path != '/' else '/' + path
            path = path.replace('//', '/')
        
        return self.nodes.get(path)
    
    def is_directory(self, path):
        node = self.get_node(path)
        return node and node.type == 'directory'
    
    def list_directory(self, path=None):
        if path is None:
            path = self.current_path
        
        node = self.get_node(path)
        if not node:
            return f"Error: Directory '{path}' not found"
        if node.type != 'directory':
            return f"Error: '{path}' is not a directory"
        
        return [child.name for child in node.children]